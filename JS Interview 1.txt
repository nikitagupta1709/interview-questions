Q1. Give an example where call apply bind is. required?
A2.  Call: The call() method invokes a function with a given this value and arguments provided one by one.
    Apply: Invokes the function with a given this value and allows you to pass in arguments as an array.
    Bind: returns a new function, allowing you to pass any number of arguments.
        Example:
        var employee1 = { firstName: "John", lastName: "Rodson" };
        var employee2 = { firstName: "Jimmy", lastName: "Baily" };

        function invite(greeting1, greeting2) {
            console.log(
                greeting1 + " " + this.firstName + " " + this.lastName + ", " + greeting2
            );
        }
        Call: 
        invite.call(employee1, "Hello", "How are you?"); // Hello John Rodson, How are you?
        invite.call(employee2, "Hello", "How are you?"); // Hello Jimmy Baily, How are you?

        Apply:
        invite.apply(employee1, ["Hello", "How are you?"]); // Hello John Rodson, How are you?
        invite.apply(employee2, ["Hello", "How are you?"]); // Hello Jimmy Baily, How are you?

        Bind:
        var inviteEmployee1 = invite.bind(employee1);
        var inviteEmployee2 = invite.bind(employee2);
        inviteEmployee1("Hello", "How are you?"); // Hello John Rodson, How are you?
        inviteEmployee2("Hello", "How are you?"); // Hello Jimmy Baily, How are you?

Q2. What is the difference between readFile and readFileSync?
A2. i) In fs.readFile() method, we can read a file in a non-blocking asynchronous way, but in fs.readFileSync() method, we can read files in a synchronous way, i.e. we are telling node.js to block other parallel process and do the current file reading process. 
    ii) readFile is non-blocking async while readFileSync is blocking sync.
    iii) readFile() method uses a callback function. Due to its non-blocking nature, the program wont wait for the file to be read completely. So that the -->The end<-- message will be printed in first or in between the file content while
        readFileSync() method uses a variable to store the file content and then delivers it. Due to its blocking nature, the program waits till the file is read completely. So that the -->The end<-- message will be printed only after the content is delivered.

Q3. What does process in node.js mean?
A3. The process object in Node.js is a global object that can be accessed inside any module without requiring it. There are very few global objects or properties provided in Node.js and process is one of them. It is an essential component in the Node.js ecosystem as it provides various information sets about the runtime of a program.
    Example: $node -p "process.version"
                     "process.release" and many more.

Q4. Explain what node.js is?
A4. Node.js is an open source server environment, uns on various platforms (Windows, Linux, Unix, Mac OS X, etc.) and uses JavaScript on the server. Node.js can generate dynamic page content
    Node.js can create, open, read, write, delete, and close files on the server, can collect form data, and can add, delete, modify data in your database
    Here is how Node.js handles a file request:

    i) Sends the task to the computer's file system.
    ii) Ready to handle the next request.
    iii) When the file system has opened and read the file, the server returns the content to the client.
    
    Node.js eliminates the waiting, and simply continues with the next request and runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.

Q5. What is the difference of JS from browser to JS on node.js
A5.  <img width="30px" src="https://miro.medium.com/max/828/1*13t_fITLmhxkWmp0HmZTnQ.webp" /> 