Q1. Give an example where call apply bind is. required?
A2. Call: The call() method invokes a function with a given this value and arguments provided one by one.
    Apply: Invokes the function with a given this value and allows you to pass in arguments as an array.
    Bind: returns a new function, allowing you to pass any number of arguments.
        Example:
        var employee1 = { firstName: "John", lastName: "Rodson" };
        var employee2 = { firstName: "Jimmy", lastName: "Baily" };

        function invite(greeting1, greeting2) {
            console.log(
                greeting1 + " " + this.firstName + " " + this.lastName + ", " + greeting2
            );
        }
        Call: 
        invite.call(employee1, "Hello", "How are you?"); // Hello John Rodson, How are you?
        invite.call(employee2, "Hello", "How are you?"); // Hello Jimmy Baily, How are you?

        Apply:
        invite.apply(employee1, ["Hello", "How are you?"]); // Hello John Rodson, How are you?
        invite.apply(employee2, ["Hello", "How are you?"]); // Hello Jimmy Baily, How are you?

        Bind:
        var inviteEmployee1 = invite.bind(employee1);
        var inviteEmployee2 = invite.bind(employee2);
        inviteEmployee1("Hello", "How are you?"); // Hello John Rodson, How are you?
        inviteEmployee2("Hello", "How are you?"); // Hello Jimmy Baily, How are you?

Q2. What is the difference between readFile and readFileSync?
A2. i) In fs.readFile() method, we can read a file in a non-blocking asynchronous way, but in fs.readFileSync() method, we can read files in a synchronous way, i.e. we are telling node.js to block other parallel process and do the current file reading process. 
    ii) readFile is non-blocking async while readFileSync is blocking sync.
    iii) readFile() method uses a callback function. Due to its non-blocking nature, the program wont wait for the file to be read completely. So that the -->The end<-- message will be printed in first or in between the file content while
        readFileSync() method uses a variable to store the file content and then delivers it. Due to its blocking nature, the program waits till the file is read completely. So that the -->The end<-- message will be printed only after the content is delivered.

Q3. What does process in node.js mean?
A3. The process object in Node.js is a global object that can be accessed inside any module without requiring it. There are very few global objects or properties provided in Node.js and process is one of them. It is an essential component in the Node.js ecosystem as it provides various information sets about the runtime of a program.
    Example: $node -p "process.version"
                     "process.release" and many more.

Q4. Explain what node.js is?
A4. Node.js is an open source server environment, uns on various platforms (Windows, Linux, Unix, Mac OS X, etc.) and uses JavaScript on the server. Node.js can generate dynamic page content
    Node.js can create, open, read, write, delete, and close files on the server, can collect form data, and can add, delete, modify data in your database
    Here is how Node.js handles a file request:

    i) Sends the task to the computer's file system.
    ii) Ready to handle the next request.
    iii) When the file system has opened and read the file, the server returns the content to the client.
    
    Node.js eliminates the waiting, and simply continues with the next request and runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.

Q5. What is the difference of JS from browser to JS on node.js
A5. i) Browser.js is mainly used for client-side applications like validations on a web page or dynamic page display and as the name suggests it gets executed in the browser only while in the case of Node.js javascript code gets executed outside the browser as it is an interpreter as well as an environment for running javascript and used for server-side applications.
    ii) Browser.js is used for frontend while Node.js is used for backend applications.
    iii) Node.js has full system access i.e can read and write directly to the file system like any other application that also concludes that we can write complete software using Node.js while Browser.js is sandboxed for the safety purposes and have access limited to the browser. 
    iv) Browser.js runs any engine like Spider monkey (Firefox), JavaScript Core (Safari), V8 (Google Chrome) accordingly to the browser while Node.js runs in a V8 engine which is mainly used by google chrome.
    v) Node.js is headless i.e without any GUI while Bowsers are not headless.
    vi) In Node.js everything is a module i.e it is mandatory to keep everything inside a module while moduling is not mandatory for browser javascript.

Q6. Write three different ways to reverse a string in Javascript? 
A6. a) using inbuilt method:

        function reverseString(str) {
            return str.split("").reverse().join("");
        }
        reverseString("hello");

    b) iteratively:
        function reverseString(str) {
            var newString = "";
            for (var i = str.length - 1; i >= 0; i--) {
                newString += str[i];
            }
            return newString;
        }
        reverseString('hello');

    c) recursively:
        function reverseString(str) {
            if (str === "")
                return "";
            else
                return reverseString(str.substr(1)) + str.charAt(0);
            }
        reverseString("hello");

Q7. Write a program to check two objects are equal ( deep equal ).
A7. i) The deepEqual() method from the library takes three parameters. The first two are the operands to be compared, and the third parameter is an optional options parameter. With the option, we can specify whether to use strict equality (===) or coercive equality (==) to compare the leaf nodes. The default option is to use coercive equality to compare leaf nodes.
        const deepEqual = require('deep-equal');

        const person1 = {
            "firstName": "John",
            "lastName": "Doe",
            "age": 35 
        }

        const person2 = {
            "firstName": "John",
            "lastName": "Doe",
            "age": "35" 
        }

        deepEqual(person1, person2); // true

        Note that the age value is a number in the person1 object and a string in the person2 object. Since the strict option is false by default, the deep-equal library uses coercive equality on the leaf nodes, so this function returns true. If the strict parameter of the function is set to true, this method would return false.
        const person2 = {
            "firstName": "John",
            "lastName": "Doe",
            "age": "35" 
        }

        deepEqual(person1, person2, {strict: true}); // false
    
    ii) The deepStrictEqual() method provided by the assert module is a built-in method in Node.js that takes three parameters: the two operands and a message as an optional parameter that will be used when an error is thrown if the two operands are not equal. This method will check for strict equality on leaf nodes. It will return undefined if the operands are equal and will throw an error if they are not deep and strictly equal.
        const assert = require('assert');

        const person1 = {
            "firstName": "John",
            "lastName": "Doe",
            "age": 35 
        }

        const person2 = {
            "firstName": "John",
            "lastName": "Doe",
            "age": 35 
        }

        console.log(assert.deepStrictEqual(person1, person2)); //true

Q8. What is shallow equal?
A8. A function for performing a shallow comparison between two objects or arrays. Two values have shallow equality when all of their members are strictly equal to the corresponding member of the other.



