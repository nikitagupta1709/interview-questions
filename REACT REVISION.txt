Q1. Explain redux to a 5 year old (ELI5) ?
A1. Consider someone who has given you a task to get some chips out of a shopkeeper. The intention ( action ) you have in your mind is to get chips from the shop. 
    In JavaScript, we can represent it as GET_CHIPS. The first step when you enter the shop is to talk to a shopkeeper and ask them to get the chips out of the safe. 
    You never just go to a shop and just went straight to the store, get your chips, and left. 

    Redux Store ( Grocery Store ) - Chips is kept safely in the store. The store holds the state and keeps it safe.

    Redux Actions - in the real world can be defined as a process of doing something. So in order to update anything in your state, we need to act on something. 
    In our shop example, we need to act by talking to a shopkeeper and ask them to give you chips.
    The action object always has a type field that describes the action you want to perform. In our case, it is GET_CHIPS.

    Reducer ( Shopkeeper ) - there is no possible way of getting chips directly from the grocery store and we have to talk to the shopkeeper to get our chips. In our case, 
    the shopkeeper is the reducer. It will go to the store and get the chips. The whole process is called dispatching an action.
    Reducer ( Shopkeeper ) has the knowledge of how to update the state ( get the chips ) and ensure states get updated ( you get the chips ). Reducers will always return 
    to the new state.

    This was the whole process of geeting chips ( performing action ) by asking from shopkeeper ( using reducer to dispatch ) and geetting chips from grocery store ( Redux store ).

Q2. What is immutability?
A2. In functional and in object-oriented programming, an object is considered as immutable when its state can’t be changed after it was created. 
    Benefits of immutable objects - they can be helpful in multi-threaded applications where multiple threads can use data represented by immutable objects without concern of the data 
    being changed by other threads.

Q3. What does Object.freeze() do?
A3. The Object.freeze() method freezes an object. Freezing an object prevents extensions and makes existing properties non-writable and non-configurable. A frozen object can no longer 
    be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's 
    prototype cannot be re-assigned. freeze() returns the same object that was passed in.
    EXAMPLE:- 
    const obj = {
        prop: 42
    };

    Object.freeze(obj);

    obj.prop = 33;
    // Throws an error in strict mode

    console.log(obj.prop);
    // expected output: 42

Q4. Why is immutability required by Redux?
A4. Immutability of redux state is necessary since it allows detecting redux state changes in an efficient manner. This implies that whenever we want to modify a redux state, we must create 
    a new copy of it and do modifications to that copy - which then becomes the new redux state.

Q5. How does Redux use shallow equality checking?
A5. React-Redux uses shallow equality checking to determine whether the component it's wrapping needs to be re-rendered. To do this, it assumes that the wrapped component is pure; that is, 
    that the component will produce the same results given the same props and state.

Q6. How well does Redux “scale” in terms of performance and architecture?
A6. The work done by Redux generally falls into a few areas: processing actions in middleware and reducers, notifying subscribers after actions are dispatched, 
    and updating UI components based on the state changes. React Redux in particular is heavily optimized to cut down on unnecessary re-renders, and React-Redux v5 shows 
    noticeable improvements over earlier versions.
    
    Redux may not be as efficient out of the box when compared to other libraries. For maximum rendering performance in a React application, state should be stored in a normalized shape, many individual 
    components should be connected to the store instead of just a few, and connected list components should pass item IDs to their connected child list items. This minimizes the overall amount of rendering 
    to be done. Use of memoized selector functions is also an important performance consideration.

Q7. How does Redux compare to the React Context API?
A7. 

Q8. What is webpack ?

Q9. What is treeshaking ?

Q10. What are some features of using webpack?